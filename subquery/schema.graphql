type Event @entity {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}

type Account @entity {
  id: ID!
  asERC721: ERC721Contract
  ERC721tokens: [ERC721Token!]! @derivedFrom(field: "owner")
  ERC721operatorOwner: [ERC721Operator!]! @derivedFrom(field: "owner")
  ERC721operatorOperator: [ERC721Operator!]! @derivedFrom(field: "operator")
  ERC721transferFromEvent: [ERC721Transfer!]! @derivedFrom(field: "from")
  ERC721transferToEvent: [ERC721Transfer!]! @derivedFrom(field: "to")
  ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
  ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")
  ERC20approvalOwnerEvent: [ERC20Approval!]! @derivedFrom(field: "owner")
  ERC20approvalSpenderEvent: [ERC20Approval!]! @derivedFrom(field: "spender")
  Proposals: [Proposal!]! @derivedFrom(field: "recipient")
  asAccessControl: AccessControl
  membership: [AccessControlRoleMember!]! @derivedFrom(field: "account")
  roleGranted: [RoleGranted!]! @derivedFrom(field: "account")
  roleGrantedSender: [RoleGranted!]! @derivedFrom(field: "sender")
  roleRevoked: [RoleRevoked!]! @derivedFrom(field: "account")
  roleRevokedSender: [RoleRevoked!]! @derivedFrom(field: "sender")
  events: [Event!]! @derivedFrom(field: "emitter")
  vestingSchedules: [VestingSchedule!]! @derivedFrom(field: "beneficiary")
  timestamp: BigInt
  balance: BigInt @index
  name: String
  ENS: ENS @derivedFrom(field: "owner") @index
}

type Wallet @entity {
  id: ID!
  asAccount: Account!
  timestamp: BigInt!
}

type ERC721Contract @entity {
  id: ID!
  asAccount: Account!
  supportsMetadata: Boolean
  isValid: Boolean
  name: String
  symbol: String
  tokens: [ERC721Token!]! @derivedFrom(field: "contract")
  operators: [ERC721Operator!]! @derivedFrom(field: "contract")
  transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
}
type ERC721Token @entity {
  id: ID!
  contract: ERC721Contract!
  identifier: BigInt!
  owner: Account! @index
  approval: Account!
  uri: String
  timestamp: BigInt
  content: String @index
  thumbnail: String
  channel: String @index
  name: String
  contentType: String
  transactionHash: String
  description: String
  transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
  application: String
  duration: Int
  captureDate: BigInt
  longitude: Float
  latitude: Float
  locationPrecision: String
  contentHash: String
}
type ERC721Operator @entity {
  id: ID!
  contract: ERC721Contract!
  owner: Account!
  operator: Account!
  approved: Boolean!
}
type ERC721Transfer implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: ERC721Contract!
  token: ERC721Token!
  from: Account!
  to: Account!
}
type AccessControl @entity {
  id: ID!
  asAccount: Account!
  roles: [AccessControlRole!]! @derivedFrom(field: "contract")
}
type Role @entity {
  id: ID!
  roleOf: [AccessControlRole!]! @derivedFrom(field: "role")
}
type AccessControlRole @entity {
  id: ID!
  contract: AccessControl!
  role: Role!
  admin: AccessControlRole!
  adminOf: [AccessControlRole!]! @derivedFrom(field: "admin")
  members: [AccessControlRoleMember!]! @derivedFrom(field: "accesscontrolrole")
  roleGranted: [RoleGranted!]! @derivedFrom(field: "role")
  roleRevoked: [RoleRevoked!]! @derivedFrom(field: "role")
  roleAdminChanged: [RoleAdminChanged!]! @derivedFrom(field: "role")
}
type AccessControlRoleMember @entity {
  id: ID!
  accesscontrolrole: AccessControlRole!
  account: Account!
}
type RoleAdminChanged implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  role: AccessControlRole!
  newAdminRole: AccessControlRole!
  previousAdminRole: AccessControlRole!
}
type RoleGranted implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  role: AccessControlRole!
  account: Account!
  sender: Account!
}
type RoleRevoked implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  role: AccessControlRole!
  account: Account!
  sender: Account!
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

# ERC20

type ERC20Contract @entity {
  id: ID!
  asAccount: Account!
  isValid: Boolean
  name: String
  symbol: String
  decimals: BigInt
  totalSupply: BigInt
  transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
  approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
}

type ERC20Transfer implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt! @index
  contract: ERC20Contract
  hash: String @index
  from: Account! @index
  to: Account! @index
  value: BigInt!
}

type ERC20Approval implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: ERC20Contract
  owner: Account!
  spender: Account!
  value: BigInt!
  hash: String @index
}

# Migration

type ProposalContract @entity {
  id: ID!
  asAccount: Account!
  proposals: [Proposal!]! @derivedFrom(field: "contract")
  grants: [ProposalGrant!]! @derivedFrom(field: "contract")
}

type ProposalGrant @entity {
  id: ID!
  contract: ProposalContract
  proposal: String @index
  recipient: Account
  initiator: Account
  amount: BigInt
  timestamp: BigInt
  hash: String @index
  granted: Boolean
  votes: [ProposalVote!]! @derivedFrom(field: "proposal")
}

type Proposal @entity {
  id: ID!
  contract: ProposalContract
  proposal: String @index
  amount: BigInt
  recipient: Account
  initiator: Account
  withdrawn: Boolean
  votes: [ProposalVote!]! @derivedFrom(field: "proposal")
  hash: String @index
  timestamp: BigInt
}

type ProposalVote @entity {
  id: ID!
  proposal: Proposal!
  voter: Account!
  timestamp: BigInt! @index
  hash: String @index
}

type VestingSchedule @entity {
  id: ID!
  beneficiary: Account! @index
  cancelAuthority: Account
  start: BigInt
  period: BigInt
  periodCount: Int
  perPeriodAmount: BigInt
  total: BigInt
  transaction: Transaction!
  cancelled: Boolean
  cancelTransaction: Transaction
  cancelTimestamp: BigInt
  renounced: Boolean
  renounceTransaction: Transaction
  renounceTimestamp: BigInt
}

type VestingScheduleCanceled @entity {
  id: ID!
  beneficiary: Account! @index
  start: BigInt
  end: BigInt
  cancelAuthority: Account
  affectedVestingSchedules: [String!]
  transaction: Transaction!
}

type VestingScheduleRenounced @entity {
  id: ID!
  beneficiary: Account! @index
  start: BigInt
  end: BigInt
  cancelAuthority: Account
  affectedVestingSchedules: [String!]
  transaction: Transaction!
}

type VestingScheduleClaimed @entity {
  id: ID!
  beneficiary: Account! @index
  start: BigInt
  end: BigInt
  amount: BigInt
  transaction: Transaction!
}

type BatchMetadata @entity {
  id: ID!
  batchSum: String @index
  digest: String @index
}

type Reward @entity {
  id: ID!
  sender: Account! @index
  beneficiary: Account! @index
  amount: BigInt
  transaction: Transaction!
  BatchMetadata: BatchMetadata
  sequence: BigInt
  status: Boolean
  signature: String
}

type AccountSnapshot @entity {
  id: ID!
  account: Account! @index
  dayDate: String! @index
  timestamp: BigInt! @index
  balance: BigInt
  transferCount: Int
  transferAmount: BigInt
  rewardCount: Int
  rewardAmount: BigInt
}

type StatSnapshot @entity {
  id: ID!
  dayDate: Date @index
  totalTransfers: Int!
  totalTransferAmount: BigInt!
  totalRewards: Int!
  totalRewardAmount: BigInt!
  newWallets: Int!
}

type TokenSnapshot @entity {
  id: ID!
  owner: Account! @index
  blockNumber: Int!
  identifier: BigInt! @index
  token: ERC721Token!
  timestamp: BigInt!
}

type TokenSnapshotV2 @entity {
  id: ID!
  owner: Account! @index
  latestIdentifier: BigInt
  firstIdentifier: BigInt!
  tokensMinted: Int!
  fistBlockTimestamp: BigInt!
  latestBlockTimestamp: BigInt
  latestBlockNumber: Int
  firstBlockNumber: Int!
  firstToken: ERC721Token!
  latestToken: ERC721Token
}

type ERC20TransferV2 implements Event
  @entity
  @compositeIndexes(fields: [["from", "to"]]) {
  id: ID!
  emitter: String!
  transaction: String!
  timestamp: BigInt! @index
  contract: String
  hash: String
  from: String! @index
  to: String! @index
  value: BigInt!
}

type UsersLevelsStats @entity {
  id: ID!
  level: Int! @index
  members: Int! @index
  total: BigInt! @index
  updatedAt: BigInt!
  createdAt: BigInt!
}

type ENS @entity {
  id: ID!
  owner: Account! @index
  expiresAt: BigInt
  registeredAt: BigInt!
  name: String! @index
  rawName: String
  caller: Account!
}

